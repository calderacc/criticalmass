{% if dateTime > ride.getDateTime() %}
    {% set pastRide = true %}
{% else %}
    {% set pastRide = false %}
{% endif %}

{% set hasSocialMedia = ride.getUrl() or ride.getFacebook() or ride.getTwitter() %}

<div class="row">
    <div class="col-md-12">
        <h1>{{ ride.getFancyTitle() }}</h1>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div id="map" style="height: 350px;"></div>
    </div>
</div>


<div class="row" style="margin-top: 1em;">
    <div class="col-md-12">
        <div role="tabpanel">
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#details" aria-controls="home" role="tab" data-toggle="tab"><i class="halflings flag"></i> Details</a></li>
                <li role="presentation"><a href="#minimass" aria-controls="settings" role="tab" data-toggle="tab"><i class="halflings map-marker"></i>Mini-Masses <span class="badge">{{ ride.getSubrides|length }}</span></a></li>
                <li role="presentation"><a href="#comments" aria-controls="messages" role="tab" data-toggle="tab"><i class="halflings pencil"></i> Kommentare <span class="badge">{{ ride.getPosts|length }}</span></a></li>
                {% if pastRide %}
                <li role="presentation"><a href="#gallery" aria-controls="settings" role="tab" data-toggle="tab"><i class="halflings uni-camera"></i> Galerie <span class="badge">{{ ride.getPhotos|length }}</span></a></li>
                <li role="presentation"><a href="#stats" aria-controls="profile" role="tab" data-toggle="tab"><i class="halflings signal"></i> Statistik</a></li>
                <li role="presentation"><a href="#tracks" aria-controls="profile" role="tab" data-toggle="tab"><i class="halflings uni-pushpin"></i> Tracks <span class="badge">{{ ride.getActiveTracks|length }}</span></a></li>
                {% endif %}
            </ul>

            <div class="tab-content">
                {% include('CalderaCriticalmassDesktopBundle:Ride:DetailsTab.html.twig') with { 'ride': ride, 'city': city } %}
                {% include('CalderaCriticalmassDesktopBundle:Ride:SubridesTab.html.twig') with { 'ride': ride, 'city': city } %}
                {% include('CalderaCriticalmassDesktopBundle:Ride:CommentsTab.html.twig') with { 'ride': ride, 'city': city } %}
                
                {% if pastRide %}
                {% include('CalderaCriticalmassDesktopBundle:Ride:GalleryTab.html.twig') with { 'ride': ride, 'city': city } %}
                {% include('CalderaCriticalmassDesktopBundle:Ride:StatisticTab.html.twig') with { 'ride': ride, 'city': city } %}
                {% include('CalderaCriticalmassDesktopBundle:Ride:TracksTab.html.twig') with { 'ride': ride, 'city': city } %}
                {% endif %}
            </div>
        </div>
    </div>
</div>

{% if app.getUser() %}

{% if pastRide %}
<div class="modal fade" id="modalEstimate" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button class="close" type="button" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Tour sch√§tzen</h4>
            </div>
            <div class="modal-body">
                {{ render(controller('CalderaCriticalmassStatisticBundle:Ride:estimateform', { 'rideId': ride.getId() })) }}
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalTrackUpload" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button class="close" type="button" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Track zu dieser Tour hochladen</h4>
            </div>
            <div class="modal-body">
                {{ render(controller('CalderaCriticalmassTrackBundle:Track:upload')) }}
            </div>
        </div>
    </div>
</div>
{% endif %}
{% endif %}

{% javascripts
'@CalderaCriticalmassCoreBundle/Resources/public/js/external/*'
'@CalderaCriticalmassGalleryBundle/Resources/public/js/external/*'
'@CalderaCriticalmassDesktopBundle/Resources/public/js/external/L.Control.Sidebar.js'
'@CalderaCriticalmassDesktopBundle/Resources/public/js/external/leaflet.groupedlayercontrol.js'
'@CalderaCriticalmassDesktopBundle/Resources/public/js/Subride/*'
'@CalderaCriticalmassDesktopBundle/Resources/public/js/City/*'
'@CalderaCriticalmassDesktopBundle/Resources/public/js/Ride/*'
'@CalderaCriticalmassTrackBundle/Resources/public/js/Track/*'
'@CalderaCriticalmassGalleryBundle/Resources/public/js/Photo/Photo.js'
'@CalderaCriticalmassGalleryBundle/Resources/public/js/Photo/*'
'@CalderaCriticalmassCoreBundle/Resources/public/js/Container/Container.js'
%}
<script type="text/javascript" src="{{ asset_url }}"></script>
{% endjavascripts %}
<script>
    /* Map */
    var map = L.map('map');
    
    /* Tilelayer */
    var tileLayer = L.tileLayer('https://{s}.tiles.mapbox.com/v3/maltehuebner.i1c90m12/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
        detectRetina: true
    });

    tileLayer.addTo(map);

    /* View */
    map.setView([53.550556, 9.993333], 13);
    
    /* City */
    var city = new City('{{ city.getCity() }}', '{{ city.getTitle() }}', '{{ city.getMainSlugString() }}', '{{ city.getDescription() }}', {{ city.getLatitude() }}, {{ city.getLongitude() }});
    
    /* Rides */
    var rideContainer = new Container();
    //var ride = new Ride(city, 'Critical Mass', 'foo', null, null, '', '{{ ride.getDateTime.format('d.m.Y') }}', '{{ ride.getDateTime.format('H:i') }}', '{{ ride.getWeatherForecast() }}');
    var ride = new Ride(city, 'Critical Mass', 'foo', {{ ride.getLatitude() }}, {{ ride.getLongitude() }}, '{{ ride.getLocation() }}', '{{ ride.getDateTime.format('d.m.Y') }}', '{{ ride.getDateTime.format('H:i') }}', '{{ ride.getWeatherForecast() }}');
    rideContainer.add(ride);
    rideContainer.addTo(map);

    /* Subrides */
    var subrideContainer = new Container();

    {% for subRide in ride.getActiveSubRides() %}
    var subride = new Subride('{% if subRide.getTitle() %}{{ subRide.getTitle() }}{% else %}Mini-Mass{% endif %}', '{% if subRide.getDescription() %}<p>{{ subRide.getDescription()|nl2br|replace({"<br />":"\\"}) }}{% endif %}', '{{ subRide.getDateTime().format('H:i') }}', {{ subRide.getLatitude() }}, {{ subRide.getLongitude() }}, '{{ subRide.getLocation() }}');
    subrideContainer.add(subride);
    {% endfor %}

    subrideContainer.addTo(map);

    $('.subride').on('click', function ()
    {
        var subRideId = $(this).data('subride');
        var subRide = subrideContainer.getEntity(subRideId);
        
        map.panTo(subRide.getLatLng());
        subRide.openPopup();
    });

    /* Tracks */
    var trackContainer = new Container();

    {% for track in ride.getActiveTracks() %}
    var track = new Track();
    track.setPolyline({{ track.getPreviewJsonArray() }}, {{ track.getColorRed() }}, {{ track.getColorGreen() }}, {{ track.getColorBlue() }});
    trackContainer.add(track);
    {% endfor %}

    trackContainer.addTo(map);
    
    $('.trackVisibility').on('click', function()
    {
        var trackNumber = $(this).data('track');

        if ($(this).prop('checked'))
        {
            trackContainer.addLayer(trackNumber);
        }
        else
        {
            trackContainer.removeLayer(trackNumber);
        }
    });

    /* Photos */
    var photoContainer = new Container();
    
    {% for photo in ride.getPhotos() %}
    var photo = new Photo({{ photo.getId() }}, {{ photo.getLatitude() }}, {{ photo.getLongitude() }}, 'Photo {{ photo.getId() }}');
    photoContainer.add(photo);
    {% endfor %}
    
    photoContainer.addTo(map);
    
    /* LayerControl */
    var layers = [];

    rideContainer.addControl(layers, 'Tour');
    subrideContainer.addControl(layers, 'Mini-Masses');
    trackContainer.addControl(layers, 'Tracks');
    photoContainer.addControl(layers, 'Fotos');

    var layerControl = L.control.groupedLayers({}, {
        'Critical Mass': layers
    }, {
        collapsed: false
    });

    layerControl.addTo(map);

    {% if pastRide and ride.getActiveTracks()|length > 0 %}
    map.fitBounds(trackContainer.getBounds());
    {% elseif ride.getActiveSubRides()|length > 0 %}
    map.fitBounds(subrideContainer.getBounds());
    rideContainer.getEntity(0).openPopup();
    {% else %}
    map.fitBounds(rideContainer.getBounds());
    rideContainer.getEntity(0).openPopup();
    {% endif %}
</script>