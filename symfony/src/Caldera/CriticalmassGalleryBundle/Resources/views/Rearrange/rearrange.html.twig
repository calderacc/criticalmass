{% extends 'CalderaCriticalmassDesktopBundle:Common:StandardTemplate.html.twig' %}

{% block title %}Fotos sortieren{% endblock %}

{% block content %}
    <div class="container">
        <ol class="breadcrumb">
            <li><a href="{{ path('caldera_criticalmass_desktop_index') }}">criticalmass.in</a></li>
            <li><a href="{{ path('caldera_criticalmass_desktop_city_list') }}">Städteliste</a></li>
            <li><a href="{{ path('caldera_criticalmass_desktop_city_show', { 'citySlug': city.getMainSlugString() }) }}">{{ city.getTitle() }}</a></li>
            <li><a href="{{ path('caldera_criticalmass_desktop_ride_show', { 'citySlug': city.getMainSlugString(), 'rideDate': ride.getFormattedDate() }) }}">{{ ride.getFancyTitle() }}</a></li>
            <li class="active">Fotos sortieren</li>
        </ol>

        <div class="row">
            <div class="col-md-12">
                <h1>Fotos neu ausrichten</h1>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <p>Hier kannst du deine Fotos neu ausrichten. Wähle zuerst einen der für diese Tour gespeicherten Track aus. Anschließend kannst du einzelne Fotos neu auf diesem Track ausrichten, deine übrigen Fotos werden anschließend automatisch neu positioniert.</p>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="trackSelect">Track</label>
                    <select id="trackSelect" class="form-control">
                        <option>Wähle einen Track</option>
                        {% for track in ride.getActiveTracks() %}
                        <option value="{{ track.getId() }}">{{ track.getUser().getUsername() }} ({{ track.getDistance() }} Kilometer)</option>
                        {% endfor %}
                    </select>
                </div>
                
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div id="map" style="height: 350px;">
            </div>
        </div>

            
        </div>

        {% javascripts
        '@CalderaCriticalmassCoreBundle/Resources/public/js/external/*'
        '@CalderaCriticalmassGalleryBundle/Resources/public/js/external/*'
        '@CalderaCriticalmassDesktopBundle/Resources/public/js/external/L.Control.Sidebar.js'
        '@CalderaCriticalmassDesktopBundle/Resources/public/js/external/leaflet.groupedlayercontrol.js'
        '@CalderaCriticalmassDesktopBundle/Resources/public/js/Subride/*'
        '@CalderaCriticalmassDesktopBundle/Resources/public/js/City/*'
        '@CalderaCriticalmassDesktopBundle/Resources/public/js/Ride/*'
        '@CalderaCriticalmassTrackBundle/Resources/public/js/Track/*'
        '@CalderaCriticalmassGalleryBundle/Resources/public/js/Photo/Photo.js'
        '@CalderaCriticalmassGalleryBundle/Resources/public/js/Photo/*'
        '@CalderaCriticalmassCoreBundle/Resources/public/js/Container/Container.js'
        %}
        <script type="text/javascript" src="{{ asset_url }}"></script>
        {% endjavascripts %}
        <script type="text/javascript">
            /* Map */
            var map = L.map('map');

            /* Tilelayer */
            var tileLayer = L.tileLayer('https://{s}.tiles.mapbox.com/v3/maltehuebner.i1c90m12/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
                detectRetina: true
            });

            tileLayer.addTo(map);

            /* View */
            map.setView([53.550556, 9.993333], 13);
            
            var coords = {};
            
            var polyline = null;
            var photoContainer = new Container();
            
            function resetPolyline()
            {
                if (polyline != null)
                {
                    map.removeLayer(polyline);
                    polyline = null;
                }
            }
            
            function loadTrack(trackId)
            {
                $.ajax({
                    url: '/app_dev.php/gallery/loadtrack/' + trackId,
                    success: function(result)
                    {
                        createPolyline(JSON.parse(result));
                    }
                });
            }
            
            function createPolyline(ajaxResponse) {
                var polylineLatLngArray = new Array();
                resetPolyline();
                
                for (var index = 0; index < ajaxResponse.length; ++index)
                {
                    var latLng = L.latLng(parseFloat(ajaxResponse[index].lat), parseFloat(ajaxResponse[index].lng));
                    coords[ajaxResponse[index].dateTime] = latLng;
                    polylineLatLngArray.push(latLng);
                }
                
                polyline = L.polyline(polylineLatLngArray, { color: 'red' });
                polyline.addTo(map);
                map.fitBounds(polyline.getBounds());
                
                loadPhotos();
            }
            
            function loadPhotos()
            {
                $.ajax({
                    url: '/app_dev.php/gallery/loadphotos/{{ ride.getId() }}',
                    success: function(result)
                    {
                        placePhotos(JSON.parse(result));
                    }
                });
            }
            
            function placePhotos(ajaxResponse)
            {
                var photoNumber = 0;
                var photoData = ajaxResponse[photoNumber];
                
                for (var timestamp in coords)
                {
                    if (timestamp > photoData.dateTime)
                    {
                        var latLng = coords[timestamp];
                        var photo = new DragablePhoto(photoData.id, latLng.lat, latLng.lng, 'Foo');
                        photo.setTimestamp(timestamp);
                        
                        photoContainer.add(photo);
                        
                        ++photoNumber;
                        photoData = ajaxResponse[photoNumber];
                    }
                    
                }
                
                photoContainer.addTo(map);
                photoContainer.snapTo(map, polyline);
                photoContainer.addEvent('snap', function(result)
                {
                     rearrangePhotos(findTimestampForLatLng(result.latlng) - this.timestamp);
                });
            }

            function findTimestampForLatLng(latLng)
            {
                var smallestDistance = null;
                var smallestTimestamp = null;
                
                for (var timestamp in coords)
                {
                    var coord = coords[timestamp];
                    
                    if (smallestDistance == null)
                    {
                        smallestDistance = coord.distanceTo(latLng);
                        smallestTimestamp = timestamp;
                    }
                    else
                    {
                        var distance = coord.distanceTo(latLng);
                        
                        if (distance < smallestDistance)
                        {
                            smallestDistance = distance;
                            smallestTimestamp = timestamp;
                        }
                    }
                    
                }
                
                return smallestTimestamp;
            }
            
            $('#trackSelect').on('change', function()
            {
                var trackId = this.value;
                
                loadTrack(trackId);
            });
        </script>
    </div>
{% endblock %}